import math

def fval(x):
    """Function for which we are finding the root."""
    return 4 * x + math.sin(x) - math.exp(x)

def dfval(x):
    """Derivative of the function."""
    return 4 + math.cos(x) - math.exp(x)

def newton_raphson(x0, tol=1e-5, max_iter=500):
    print(f"{'Iter':<5}{'xk':>20}{'f(xk)':>20}{'Error':>20}")
    
    xk = x0
    for k in range(1, max_iter + 1):
        fxk = fval(xk)
        dfxk = dfval(xk)
        if dfxk == 0:
            print("Zero derivative. No solution found.")
            return None

        xp = xk
        xk = xp - fxk / dfxk
        err = abs(xk - xp) / abs(xk)

        print(f"{k:<5}{xk:>20.16f}{fxk:>20.16f}{err:>20.12f}")

        if err < tol:
            print("Required accuracy achieved; Solution is convergent.")
            return xk

    print("The number of iterations exceeded the maximum limit.")
    return None

# Example usage
initial_guess = float(input("Enter the initial approximation: "))
root = newton_raphson(initial_guess)
