def compare_root_finding_methods(f, df, a, b, x0, tol=1e-6, max_iter=1000):
    def bisection(f, a, b, tol, max_iter):
        steps = 0
        if f(a) * f(b) >= 0:
            return None, steps  # the interval is invalid 
        while (b - a) / 2.0 > tol and steps < max_iter:
            midpoint = (a + b) / 2.0
            if f(midpoint) == 0:
                return midpoint, steps + 1
            elif f(a) * f(midpoint) < 0:
                b = midpoint
            else:
                a = midpoint
            steps += 1
        return (a + b) / 2.0, steps

    def newton_raphson(f, df, x0, tol, max_iter):
        steps = 0
        x = x0
        for _ in range(max_iter):
            fx = f(x)
            dfx = df(x)
            if dfx == 0:
                return None, steps  # Derivative zero;it can't proceed
            x_new = x - fx / dfx
            steps += 1
            if abs(x_new - x) < tol:
                return x_new, steps
            x = x_new
        return x, steps

    bisection_result, bisection_steps = bisection(f, a, b, tol, max_iter)
    newton_result, newton_steps = newton_raphson(f, df, x0, tol, max_iter)

    return {
        "Bisection": {"Root": bisection_result, "Steps": bisection_steps},
        "Newton-Raphson": {"Root": newton_result, "Steps": newton_steps}
    }


example 
import math

f = lambda x: x**3 - x - 2
df = lambda x: 3*x**2 - 1

result = compare_root_finding_methods(f, df, a=1, b=2, x0=1.5)
print(result)
